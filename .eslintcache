[{"C:\\Study\\ThirdYear\\WebWeavingServices\\React-app-trucking-system\\trucking-system\\src\\index.js":"1","C:\\Study\\ThirdYear\\WebWeavingServices\\React-app-trucking-system\\trucking-system\\src\\reportWebVitals.js":"2","C:\\Study\\ThirdYear\\WebWeavingServices\\React-app-trucking-system\\trucking-system\\src\\Components\\TruckingList.js":"3","C:\\Study\\ThirdYear\\WebWeavingServices\\React-app-trucking-system\\trucking-system\\src\\Components\\Trucking.js":"4","C:\\Study\\ThirdYear\\WebWeavingServices\\React-app-trucking-system\\trucking-system\\src\\Router\\router.js":"5","C:\\Study\\ThirdYear\\WebWeavingServices\\React-app-trucking-system\\trucking-system\\src\\Components\\TruckingForm.js":"6","C:\\Study\\ThirdYear\\WebWeavingServices\\React-app-trucking-system\\trucking-system\\src\\Components\\TruckingPage.js":"7"},{"size":271,"mtime":1611050138201,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":4371,"mtime":1611252482238,"results":"12","hashOfConfig":"9"},{"size":1170,"mtime":1611252353392,"results":"13","hashOfConfig":"9"},{"size":293,"mtime":1611254617275,"results":"14","hashOfConfig":"9"},{"size":3766,"mtime":1611252565784,"results":"15","hashOfConfig":"9"},{"size":298,"mtime":1611254610024,"results":"16","hashOfConfig":"9"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1p81j8t",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1was1l1",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"19"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Study\\ThirdYear\\WebWeavingServices\\React-app-trucking-system\\trucking-system\\src\\index.js",[],["34","35"],"C:\\Study\\ThirdYear\\WebWeavingServices\\React-app-trucking-system\\trucking-system\\src\\reportWebVitals.js",[],["36","37"],"C:\\Study\\ThirdYear\\WebWeavingServices\\React-app-trucking-system\\trucking-system\\src\\Components\\TruckingList.js",["38"],"import React, {Component} from 'react';\r\nimport Trucking from \"./Trucking\";\r\nimport TruckingFormUpdate from \"./TruckingForm\";\r\nimport Truckings from \"../Data/TruckingData.json\";\r\nimport moment from \"moment\";\r\nimport {Table, TableBody, TableCell, TableContainer} from \"@material-ui/core\";\r\n\r\nclass TruckingList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            truckings: [],\r\n            formInputs: {\r\n                id: null,\r\n                name: 'Name',\r\n                date: '',\r\n                city: 'City'\r\n            },\r\n            editing: false\r\n        }\r\n\r\n        this.eachTrucking = this.eachTrucking.bind(this)\r\n        this.update = this.update.bind(this)\r\n        this.delete = this.delete.bind(this)\r\n        this.add = this.add.bind(this)\r\n        this.nextId = this.nextId.bind(this)\r\n        this.fill = this.fill.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        Truckings.map(item => this.add({\r\n            id: item.id,\r\n            name: item.name,\r\n            date: item.date,\r\n            city: item.city\r\n        }))\r\n    }\r\n\r\n    fill(index) {\r\n        this.setState(prevState => ({\r\n            editing: true,\r\n            formInputs: {\r\n                id: prevState.truckings[index][\"id\"],\r\n                date: prevState.truckings[index][\"date\"],\r\n                name: prevState.truckings[index][\"name\"],\r\n                city: prevState.truckings[index][\"city\"]\r\n            }\r\n        }))\r\n    }\r\n\r\n    update(newTrucking, i) {\r\n        this.setState(prevState => ({\r\n                editing: false,\r\n                truckings: prevState.truckings.map(\r\n                    trucking => {\r\n                        if (trucking.id === i) {\r\n                            const date = moment(trucking.date);\r\n                            if(!date.isValid()) {\r\n                                alert(\"Date is invalid, please enter new one\");\r\n                                return;\r\n                            }\r\n                            trucking.date = newTrucking.date\r\n                            trucking.name = newTrucking.name\r\n                            trucking.city = newTrucking.city\r\n                        }\r\n                        return trucking\r\n                    }\r\n                )\r\n            }\r\n        ))\r\n    }\r\n\r\n    delete(id) {\r\n        this.setState(prevState => ({\r\n            truckings: prevState.truckings.filter((trucking, i) => i !== id)\r\n        }))\r\n    }\r\n\r\n    add({id = null, date = null, name = null, city = null}) {\r\n        this.setState(prevState => ({\r\n            truckings: [\r\n                ...prevState.truckings, {\r\n                    id: id !== null ? id : this.nextId(prevState.truckings),\r\n                    date: date,\r\n                    name: name,\r\n                    city: city\r\n                }]\r\n        }))\r\n    }\r\n\r\n    nextId(truckings = []) {\r\n        let max = truckings.reduce\r\n        ((prev, curr) => prev.id > curr.id ? prev.id : curr.id, 0);\r\n        return ++max;\r\n    }\r\n    \r\n    tabCellStyle = {\r\n        borderBottom: 'none',\r\n        fontFamily: 'Rubik, sans-serif'\r\n    }\r\n\r\n\r\n    eachTrucking(item, i) {\r\n        return (\r\n            <Trucking key={item.id} index={i} onChange={this.fill} onDelete={this.delete}>\r\n                <TableCell style={this.tabCellStyle}> {i + 1} </TableCell>\r\n                <TableCell style={this.tabCellStyle}> {item.date} </TableCell>\r\n                <TableCell style={this.tabCellStyle}> {item.name} </TableCell>\r\n                <TableCell style={this.tabCellStyle}> {item.city} </TableCell>\r\n            </Trucking>\r\n        )\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <div className={'background'}>\r\n                <div className={'container'}>\r\n                <TableContainer className={'tableContainer'}>\r\n                    <Table>\r\n                        <TableBody style={{overflow: 'scroll'}}>\r\n                            { this.state.truckings.map(this.eachTrucking) }\r\n                        </TableBody >\r\n                    </Table>\r\n                </TableContainer >\r\n                <TruckingFormUpdate formInputs={this.state.formInputs} editing={this.state.editing} onAdd={this.add} onEdit={this.update}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TruckingList;","C:\\Study\\ThirdYear\\WebWeavingServices\\React-app-trucking-system\\trucking-system\\src\\Components\\Trucking.js",[],"C:\\Study\\ThirdYear\\WebWeavingServices\\React-app-trucking-system\\trucking-system\\src\\Router\\router.js",[],"C:\\Study\\ThirdYear\\WebWeavingServices\\React-app-trucking-system\\trucking-system\\src\\Components\\TruckingForm.js",[],"C:\\Study\\ThirdYear\\WebWeavingServices\\React-app-trucking-system\\trucking-system\\src\\Components\\TruckingPage.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"39","replacedBy":"43"},{"ruleId":"41","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":60,"column":33,"nodeType":"47","messageId":"48","endLine":60,"endColumn":40},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],["49"],["50"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","no-global-assign","no-unsafe-negation"]